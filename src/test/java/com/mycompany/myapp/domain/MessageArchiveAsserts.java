package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MessageArchiveAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageArchiveAllPropertiesEquals(MessageArchive expected, MessageArchive actual) {
        assertMessageArchiveAutoGeneratedPropertiesEquals(expected, actual);
        assertMessageArchiveAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageArchiveAllUpdatablePropertiesEquals(MessageArchive expected, MessageArchive actual) {
        assertMessageArchiveUpdatableFieldsEquals(expected, actual);
        assertMessageArchiveUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageArchiveAutoGeneratedPropertiesEquals(MessageArchive expected, MessageArchive actual) {
        assertThat(expected)
            .as("Verify MessageArchive auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageArchiveUpdatableFieldsEquals(MessageArchive expected, MessageArchive actual) {
        assertThat(expected)
            .as("Verify MessageArchive relevant properties")
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getHasRead()).as("check hasRead").isEqualTo(actual.getHasRead()))
            .satisfies(e -> assertThat(e.getHasEmergAlert()).as("check hasEmergAlert").isEqualTo(actual.getHasEmergAlert()))
            .satisfies(e -> assertThat(e.getHasSignOut()).as("check hasSignOut").isEqualTo(actual.getHasSignOut()))
            .satisfies(e -> assertThat(e.getSenderRefTable()).as("check senderRefTable").isEqualTo(actual.getSenderRefTable()))
            .satisfies(e -> assertThat(e.getSenderRefId()).as("check senderRefId").isEqualTo(actual.getSenderRefId()))
            .satisfies(e -> assertThat(e.getReceiverRefTable()).as("check receiverRefTable").isEqualTo(actual.getReceiverRefTable()))
            .satisfies(e -> assertThat(e.getReceiverRefId()).as("check receiverRefId").isEqualTo(actual.getReceiverRefId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getStudentId()).as("check studentId").isEqualTo(actual.getStudentId()))
            .satisfies(e -> assertThat(e.getHasPrivateActive()).as("check hasPrivateActive").isEqualTo(actual.getHasPrivateActive()))
            .satisfies(e -> assertThat(e.getSchoolId()).as("check schoolId").isEqualTo(actual.getSchoolId()))
            .satisfies(e -> assertThat(e.getLastModified()).as("check lastModified").isEqualTo(actual.getLastModified()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMessageArchiveUpdatableRelationshipsEquals(MessageArchive expected, MessageArchive actual) {}
}
